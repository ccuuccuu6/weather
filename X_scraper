#!/usr/bin/env python3
import sys
import os
import requests

# ─── CONFIG ────────────────────────────────────────────────────────────────
# Paste your token here (keep this file secure!)
BEARER_TOKEN = "AAAAAAAAAAAAAAAAAAAAABQx1wEAAAAAlYJhxOp18vuHglsxBBRvhNorcgA%3DMpqhdRP542F8qla3rJctGsXHizPalo6QX7iyJw3oyXVKTzQTyB"
if not BEARER_TOKEN:
    sys.exit("Error: Please set your BEARER_TOKEN in the script.")

URL = "https://api.twitter.com/2/tweets/counts/recent"

# ─── FUNCTIONS ─────────────────────────────────────────────────────────────

def fetch_recent_counts(query: str, granularity: str = "day") -> dict:
    headers = {"Authorization": f"Bearer {BEARER_TOKEN}"}
    params  = {"query": query, "granularity": granularity}
    resp    = requests.get(URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()

def print_counts(data: dict) -> None:
    for bucket in data.get("data", []):
        day   = bucket["start"][:10]
        count = bucket["tweet_count"]
        print(f"{day}: {count}")

def main(query: str = "#boycottdove") -> None:
    print(f"Fetching daily counts for: {query!r}\n")
    data = fetch_recent_counts(query)
    print_counts(data)

# ─── ENTRY POINT ────────────────────────────────────────────────────────────

if __name__ == "__main__":
    # Grab everything after the script name…
    raw = sys.argv[1:]
    # …but drop any IPython flags or kernel-.json paths:
    args = [
        a for a in raw
        if not a.startswith("-")         # no flags like -f, --profile, etc.
        and not a.endswith(".json")       # no kernel-*.json files
        and os.sep not in a               # no paths with / or \
    ]
    # First “real” arg is our query; else default:
    query = args[0] if args else "#boycottdove"
    main(query)
